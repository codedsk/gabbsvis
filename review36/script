Welcome back to the GABBs 36 month review.


Earlier we heard an indepth view of the Idata components that support the access and organization of data. Data management is one of major pieces that make up a HUB. Now, I'd like to shift our focus a little bit to another part of the cyberinfrastructure that supports simulation, modeling, and data visualization.

-----------------------

In this section we'll discuss two approaches we have taken to providing building blocks that researchers can use to incorporate geospacial data into their simulations, and visualize the output of simulations that involve geospacial data.

Along the way, I'll show you how we made these features available in the Rappture Toolkit and how people can now build Rappture based simulation tools that show geospacial data as output.

I'll also show you a library we developed, called PyMapLib, which provides an easy way for researchers to visualize geospacial data in graphical user interfaces written in Python, Java, and C++.


But before we get to those, I want to give you a little bit of background information about the different pieces in our infrastructure that are needed to support these solutions.

-----------------------

Many people know the hubzero platform for it Seminars, Data Management, Question and Answer boards, and Online education modules, but at the heart of the HUB is the simulation and modeling environment it provides.

-----------------------

We call it the tool container.

Tool containers are containerized linux desktops that you can access through your web browser.

-----------------------


They run on infrastructure either here at Purdue or wherever the hub is located, but through the magic of VNC, the display shows up in your web browser so you can view and manipulation applications with real, desktop style graphical user interfaces. It's like having a desktop available to you inside of your web browser.


We load these containers up with software people commonly use to build simulation tools. These include things like the gcc and gfortan compilers, editors like emacs and geany, debuggers, and interpreters for Python, Ruby and Perl.

-----------------------

We've connected the tool containers to super computing resources like XSEDE and Open Science Grid, so people can easily access the computing infrastucture they are familiar with,

-----------------------

and visualizations servers so researchers can avoid having to download results after every simulation to see what the results look like.

The tool containers are an environment where people can develop software and run applications. When the developer is ready to share their application with others, they can publish it on the HUB website, and it will run in the same type of environment in which they developed it.

Because the tool containers are a generic environment, they can support any graphical user interface that is compatible with the X Windowing system (or X11). This includes libraries like Java's AWT and Swing, WxWindows, Qt, and Tk. While these libraries are great for expert user interface designers, they can sometime be overwhelming for others.

Many of the people we are trying to serve are experts in their field of science and just want to share their research with others on the HUB. This is why we created the Rappture Toolkit, and made it available inside of the workspaces.

-----------------------

Rappture stands for the Rappid APPlication infrastrucTURE and over the years people have used it to build and deploy hundreds of applications online.

With Rappture, developers can quickly generate a graphical user interface that collects inputs from the user, a simulation, and visualizes the output for the user.

Because the underlying simulation code could be written in any programming language, Rappture has bindings to all of your favorite programming languages, including C, C++, Python, Perl, Java, Matlab and Others.

-----------------------

Earlier, I mentioned that the tool containers have access to render servers. Rappture applications hook into these render servers so users can seamlessly run a simulation

-----------------------

and visualize the output. And by visualize, I don't mean just showing a static image of the output, although it can handle that. These outputs are interactive in that users can zoom, rotate, and compare them with output from other runs.

-----------------------

Up until recently, Rappture applications supported visualizing molecules through PyMol and 3D structures through VTK. The library lacked a way to visualize geographic data. So in this project we have been integrating geographic visualization services into the workspace environment and the Rappture Toolkit.

-----------------------

As a part of this effort, we have launched a new visualization server that provides geographic mapping to applications based on the Rappture Toolkit. We call it GeoVis and it's based on osgEarth, a free and open source C++ geospaitial toolkit.

osgEarth supports many  of the common data formats including GeoTiff, netCDFm TMS,WMs, and XYZ for Raster. If you're working with shapefiles or other vector data, OSG Earth can handle that too. Because it's roots are from the work of 3 dimentional visualization, it can handle the 3D model formats of OpenSceneGraph.

-----------------------

We've set it up to talk to IData so users can pull data from their projects, and combine it outside resources like mapquest, mapbox, and openstreetmaps, all on one map.

-----------------------

And Rappture applications can communicate with the render server through the Rappture Mapping widget client.

-----------------------

Lets take a look at what it takes to add geospatial data to a Rappture Application.
Here, I have a dataset from a 2010 earthquake in Chile. It is a part of a larger database compiled by Ann Christine Catlin for the Disaster and Failure Studies Program at NIST. After the earthquake, researchers were able to document the location attributes of damaged buildings. The data is stored in a comma separated value file.

Let's look at what it would take to visualize this data.

-----------------------

To give the data context, it would be nice to visualize it as makers on top of a map of Chile. We can get a map of Chile from the OpenStreetMap project. They host a tile server with Raster formated images showing the layout of the city and streets.

-----------------------

In the end I'd like to combine these two data sources together and see markers from my earthquake data on top of a map of the Chile.

-----------------------

Then I'd like to be able to focus my attention on the capitol city Santiago where I can get street level detail and investigate individual damage locations.

-----------------------

And when I click on a marker on the map, I want to be able to tell the name of the building and the city it is located in.

-----------------------

With the Rappture Toolkit, we can build an application like this in minutes.
There are about 5 steps involved.

-----------------------

Integrating a rappture application with the geovis render server can be done in 3 steps.
Describe your map using the xml
1. setup the mapviewer
2. describe the layers
    - standard templates for OGR, TFS, WFS,
3. configure the attribute placard
4. configure the camera
5. render results

-----------------------

Let me show you an application that previously displayed a static map, and now has been updated to include an interactive map. LandParam demo


-----------------------

If you're building your application in another language like Python, you can take advantage of PyMapLib. It is a library we built to fill the gap for researchers looking for an easy to use open source map library. It provides a generic framework for geospacial data visualization and handles common geospacial data types and protocols. It is good for building applications that do simple data visualization and analysis.

-----------------------

It is built on top of:
* qgis, which provides geospacial data rendering
* pyqt, which the user inerface is written in
* gdal/ogr, which does the parsing and querying of data sources
* proj4, which provides projection information
* and matplotlib, which provides 2D plotting

but the user doesnt see any of these pieces when configuring the widget. They interact with an api that resembles the Google Maps API. Based off their configuration they can load map layers, configure sidebars.


-----------------------

conclusion
two building block solutions:
1. Rappture widget supports Rappture applications, can be used in tcl/tk applications as well. supports visualization of 2D and 3D data, render server backed solution.
2. PyMapLib supports Python applications, 2D data, allows developers to quickly tap into more complicated libraries like qgis, gdal, proj4, and matplotlib.


