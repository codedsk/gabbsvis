Welcome back to the GABBs 36 month review.


Earlier we heard an indepth view of Idata component that supports the access and organization of data. Data management is one of major pieces that make up a HUB. Now, I'd like to shift our focus a little bit to another part of the cyberinfrastructure that supports simulation, modeling, and data visualization.

-----------------------

In this section we'll discuss two approaches we have taken to providing building blocks that researchers can use to incorporate geospacial data into their simulations, and visualize the output of simulations that involve geospacial data.

Along the way, I'll show you how we incorprated geospacial data visualization into the Rappture Toolkit, and how people can now build Rappture based simulation tools that show geospacial data as output.

And you'll also be introduced to the PyMapLib library, which provides an easy way for researchers to visualize geospacial data in graphical user interfaces written in Python Java, and C++.


But before we get to those, I want to give you a little bit of background information about the different pieces in our infrastructure that are needed to support these solutions.

-----------------------

Many people know the hubzero platform for it Seminars, Data Management, Online education modules, and Questiosn and Answer boards, but at the heart of the HUB is the simulation and modeling environment it provides. We call it the tool container.

-----------------------

Tool containers are containerized linux desktops that you can access through your web browser. They run on infrastructure here at Purdue, but through the magic of VNC, the display shows up in your web browser so you can view and manipulation applications with real, desktop style graphical user interfaces. It is like having a desktop available to you inside of your web browser.


We load these containers up with software people commonly use to build simulation tools. These include things like the gcc and gfortan compilers, editors like emacs and geany, debuggers, and interpreters for Python, Ruby and Perl.

-----------------------

We've connected the tool containers to super computing resources like XSEDE and Open Science Grid, so people can easily access the computing infrastucture they are familiar with, and visualizations servers so researchers can avoid having to download results after every simulation to see what the results look like.

The tool containers are an environment where people can develop software and run applications. When the developer is ready to share their application with others, they can publish it on the HUB website, and it will run in the same type of environment in which they developed it.

-----------------------

Because the tool containers are a generic environment, they can support any graphical user interface that is compatible with the X Windowing system (or X11). This includes libraries like Java's AWT and Swing, WxWindows, Qt, and Tk. While these libraries are great for expert user interface designers, they can sometime be overwhelming for others.

Many of the people we are trying to serve are experts in their field of science and just want to share their research with others on the HUB. This is why we created the Rappture Toolkit, and made it available inside of the workspaces.

-----------------------

Rappture stands for the Rappid APPlication infrastrucTURE and over the years people have used it to build and deploy hundreds of applications online. It has bindings to all of your favorite programming languages.

-----------------------

Earlier, I mentioned that the tool containers have access to render servers. Rappture applications hook into these visualization servers so users can seamlessly run a simulation and visualize the output. (cntbands output). And by visualize, I don't mean just showing a static image of the output. These outputs are interactive in that users, zoom, rotate, and compare them with output from other runs. (3 part slide, highlight zoom, highlight rotate, highlight compare)

Up until recently, Rappture applications supported visualizing molecules through PyMol and 3D structures through VTK. The library lacked a way to visualize geographic data. So in this project we have been integrating geographic visualization services into the workspace environment and the Rappture Toolkit.

As a part of this effort, we have launched a new visualization server that provides geographic mapping to applications based on the Rappture Toolkit. We call it GeoVis and it is based on the osgEarth (https://github.com/gwaldron/osgearth), a free and open source C++ geospacial toolkit.

osgEarth supports all of the common file formats (list them out)
and data sources like TMS, WMS, ... (list them out)
It also allows us to visualize data in different projections, includeing 3D data.
and it can talk to IData to help minimize copying large datasets.

-----------------------

Integrating a rappture application with the geovis render server can be done in 3 steps.
Describe your map using the xml
1. setup the mapviewer
2. describe the layers
    - standard templates for OGR, TFS, WFS,
3. configure the attribute placard
4. configure the camera
5. render results

-----------------------

Let me show you an application that previously displayed a static map, and now has been updated to include an interactive map. LandParam demo

You can also add geovis visualizations to applications that use Rappture widgets, but are not formally Rappture applications. Here is an example of a tool named Geobuilder. Its purpose is to make it easy to setup a view your data on a geographic map.

If you're building your application in another language like Python, you can take advantage of PyMapLib. It is a library we built to ...





-----------------------------------------------------------------------

The HUBzero Platform provides a place where researchers can collaborate, disseminate their research and science communities can grow.

enables developers and researchers to build software in secure, scalable and sharable desktop-like environments.

